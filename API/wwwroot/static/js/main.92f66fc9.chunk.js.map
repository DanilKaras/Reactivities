{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dahsboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dahsboard/ActivityListItemAttendee.tsx","features/activities/dahsboard/ActivityListItem.tsx","features/activities/dahsboard/ActivityList.tsx","features/activities/dahsboard/ActivityListItemPlaceholder.tsx","features/activities/dahsboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetail.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivites","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","state","createActivity","userStore","attendee","newActivity","hostUsername","profiles","runInAction","loadActivity","getActivity","isGoing","some","isHost","host","find","x","Date","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followerCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","loadingFollowings","followings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","attendees","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","bordered","circular","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","ServerError","message","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentuser","target","setTarget","addPhotoMode","setAddPhotoMode","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.92f66fc9.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        debugger;\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay);\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if(token) config.headers.Authorization = `Bearer ${token}`;\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if(pagination){\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>;\n    }\n    return response;\n}, (error: AxiosError) => {\n    const {data, status, config} = error.response!;\n    switch(status){\n        case 400: \n            debugger;\n            if(typeof data === 'string'){\n                toast.error(data);\n            }\n            if(config.method === 'get' && data.errors.hasOwnProperty('id')){\n                history.push('/not-found');\n            }\n            if(data.errors){\n                const modalStateErrors = [];\n                for(const key in data.errors){\n                    if(data.errors[key]){\n                        modalStateErrors.push(data.errors[key]);\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            break;\n        case 401: \n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500: \n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n});\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst request =\n{\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post:<T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\n        .then(responseBody),\n    details: (id: string) => request.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => request.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => request.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => request.del<void>(`/activities/${id}`),\n    attend: (id: string) => request.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account ={\n    current: () => request.get<User>('/account'),\n    login: (user: UserFormValues) => request.post<User>('/account/login', user),\n    register: (user: UserFormValues) => request.post<User>('/account/register', user)\n}\n\nconst Profiles={\n    get: (username: string) => request.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photo', formData, {\n            headers: {'Content-type': 'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => request.post(`/photo/${id}/setMain`, {}),\n    deletePhoto: (id: string) => request.del(`/photo/${id}`),\n    updateProfile: (profile: Partial<Profile>) => request.put(`/profiles`, profile),\n    updateFollowing: (username: string) => request.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) =>\n        request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        request.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername?: string;\n    isCancelled?: boolean;\n    isGoing?: boolean;\n    isHost?: boolean;\n    host?: Profile;\n    profiles?: Profile[];\n}\n\nexport class Activity implements Activity{\n    constructor(init?: ActivityFormValues){\n        Object.assign(this,init);\n    }\n}\n\nexport class ActivityFormValues{\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues){\n        if(activity){\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.venue = activity.venue;\n            this.city = activity.city;\n        }\n    }\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followerCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile{\n    constructor(user: User){\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo{\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity{\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { format } from 'date-fns'\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivites();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    } \n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values())\n            .sort((a, b) => a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as { [key: string]: Activity[] })\n        )\n    }\n\n    loadActivites = async () => {\n        this.loadingInitial = true;\n        try {\n            debugger;\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            })\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: Activity) => {\n        const user = store.userStore.user;\n        const attendee= new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.profiles = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        }\n        else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.profiles?.some(a => a.username === user.username)\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.profiles?.find(x => x.username === activity.hostUsername);\n        }\n\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        this.loading = true;\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if(activity.id){\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity};\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n                \n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if(this.selectedActivity?.isGoing){\n                    this.selectedActivity.profiles = \n                        this.selectedActivity.profiles?.filter(x=>x.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.profiles?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n\n        } finally {\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try{\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch(error){\n            console.log(error);\n        } finally {\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.profiles?.forEach(attendee => {\n                if(attendee.username === username){\n                    attendee.following ? attendee.followerCount-- : attendee.followerCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}\n\n","import { throws } from \"assert\";\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading: boolean = false;\n    loading: boolean = false;\n    loadingFollowings: boolean = false;\n    followings: Profile[] = []; \n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n    \n    constructor(){\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentuser(){\n        if(store.userStore.user && this.profile){\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async(username: string) => {\n        this.loadingProfile = true;\n        try{\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false)\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try{\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if(this.profile){\n                    this.profile.photos?.push(photo);\n                    if(photo.isMain && store.userStore.user){\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch(error){\n            console.log(error);\n            runInAction(() => this.uploading =  false);\n        }\n    }\n\n    setMainPhoto = async(photo: Photo) => {\n        this.loading = true;\n        try{\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if(this.profile && this.profile.photos){\n                    this.profile.photos.find(p=>p.isMain)!.isMain = false;\n                    this.profile.photos.find(p=>p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        }\n        catch(error){\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try{\n            await agent.Profiles.deletePhoto(photo.id);\n            if(this.profile){\n                this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                this.loading = false;\n            }\n        } catch(error){\n            runInAction(() => { \n                this.loading = false;\n                console.log(error)\n            })\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followerCount++ : this.profile.followerCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                \n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followerCount-- : profile.followerCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loadingActivities = false;\n            })\n        }\n    }\n\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => {\n                this.user = user;\n            })\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try{\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch(error){\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => {\n                this.user = user;\n            })\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n\n    setImage = (image: string)=>{\n         if(this.user){\n             this.user.image = image;\n         }\n    }\n}"," import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store{\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore(){\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n    constructor() {\n        makeAutoObservable(this);\n        reaction(() => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            });\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore{\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment [] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if(store.activityStore.selectedActivity){\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment);\n\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try{\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch(error){\n            console.log(error);\n        }\n    }\n}","import { observer } from 'mobx-react-lite';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\n\n\nconst NavBar = () => {\n    const { userStore: { user, logout } } = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\n                    Reactivites\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || 'assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n}\n\nexport default observer(NavBar);","import { observer } from \"mobx-react-lite\";\nimport Calendar from \"react-calendar\"\nimport { Header, Menu } from \"semantic-ui-react\"\nimport { useStore } from \"../../../app/stores/store\";\n\nconst ActivityFilters = () => {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activites' \n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\" \n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\" \n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}    \n                />\n            </Menu>\n            <Header />\n            <Calendar \n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n        \n    )\n}\n\nexport default observer(ActivityFilters)","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nconst FollowButton = ({ profile }: Props) => {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile?.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile?.following ? 'Following' : 'Not following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile?.following ? 'red' : 'green'}\n                    content={profile?.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile?.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n}\n\n\nexport default observer(FollowButton);","import { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { Card, Icon, Image } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\"\nimport FollowButton from \"./FollowButton\";\n\ninterface Props{\n    profile: Profile\n}\n\n\nconst ProfileCard = ({profile}: Props) => {\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'}></Image>\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>{profile.displayName}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user'/>\n                {profile.followerCount} followers\n            </Card.Content>\n            <FollowButton profile={profile}/>\n        </Card>\n    )\n}\n\nexport default observer(ProfileCard);","import { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { List, Image, Popup } from \"semantic-ui-react\";\nimport { Profile } from \"../../../app/models/profile\";\nimport ProfileCard from \"../../profiles/ProfileCard\";\n\ninterface Props {\n    attendees: Profile[];\n}\n\nconst ActivityListItemAttendee = ({ attendees }: Props) => {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup hoverable key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image \n                            bordered\n                            style={attendee.following ? styles : null}\n                            size='mini' circular src={attendee.image || '/assets/user.png'} />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee}/>\n                    </Popup.Content>\n                </Popup>\n            ))}\n        </List>\n    )\n}\n\n\nexport default observer(ActivityListItemAttendee);\n","import { Link } from \"react-router-dom\";\nimport { Item, Button, Segment, Icon, Label } from \"semantic-ui-react\";\nimport { Activity } from \"../../../app/models/activity\";\nimport {format} from 'date-fns'\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\ninterface Props {\n    activity: Activity\n}\n\nconst ActivityListItem = ({ activity }: Props) => {\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled && \n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}}/>    \n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'}/>\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>\n                                Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\n                            </Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.profiles!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button \n                    as={Link} \n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n};\n\nexport default ActivityListItem;","import { observer } from \"mobx-react-lite\";\nimport { Fragment } from \"react\";\nimport { Header } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityListItem from \"./ActivityListItem\";\n\nconst ActivityList = () => {\n\n\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities && activities.map(activity =>\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    )}\n                </Fragment>\n            ))}\n        </>\n\n\n\n    )\n}\n\nexport default observer(ActivityList);","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nconst ActivityListItemPlaceholder = () => {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n\nexport default ActivityListItemPlaceholder;","import { observer } from 'mobx-react-lite';\nimport { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Button, Grid, Loader } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\nconst ActivityDashboard = () => {\n\n    const { activityStore } = useStore();\n    const { loadActivites, activityRegistry, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    const handleGetNext = () => {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivites().then(() => setLoadingNext(false));\n    }\n\n\n    useEffect(() => {\n        if(activityRegistry.size <= 1) loadActivites();\n    }, [activityRegistry.size, loadActivites])\n\n\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder/>\n                        <ActivityListItemPlaceholder/>\n                    </>\n\n                ) : (\n                    <InfiniteScroll \n                        pageStart={0} \n                        loadMore={handleGetNext} \n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}>\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n\n            <Grid.Column width='6'>\n                <ActivityFilters/>\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext}/>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(ActivityDashboard);","import { useField } from \"formik\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props{\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\nconst MyTextInput = (props: Props) => {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n\nexport default MyTextInput;","import { ErrorMessage, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button, Form, Header, Label } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\n\nconst LoginForm = () => {\n\n\n    const {userStore} = useStore();\n    return (\n        <Formik \n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                setErrors({error: 'Invalid email or password'}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email'/>\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\n                    <ErrorMessage\n                        name='error'\n                        render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid/>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default observer(LoginForm);","import { Message } from \"semantic-ui-react\"\n\ninterface Props{\n    errors: any;\n}\n\nconst ValidationErrors = ({errors}:Props) => {\n    return (\n        <Message error> \n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => {\n                        return <Message.Item key={i}>{err}</Message.Item>\n                    })}\n                </Message.List>\n            )}\n        </Message>\n    )\n\n}\n\nexport default ValidationErrors;","import { ErrorMessage, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { Button, Form, Header } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\nimport * as Yup from 'yup';\nimport ValidationErrors from \"../errors/ValidationErrors\";\n\n\nconst RegisterForm = () => {\n\n\n    const {userStore} = useStore();\n    return (\n        <Formik \n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n                validationSchema={Yup.object({\n                    displayName: Yup.string().required(),\n                    username: Yup.string().required(),\n                    email: Yup.string().required().email(),\n                    password: Yup.string().required(),\n                })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name'/>\n                    <MyTextInput name='username' placeholder='Username'/>\n                    <MyTextInput name='email' placeholder='Email'/>\n                    <MyTextInput name='password' placeholder='Password' type='password'/>\n                    <ErrorMessage\n                        name='error'\n                        render={() => <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} positive content='Login' type='submit' fluid/>\n                </Form>\n            )}\n        </Formik>\n    )\n}\n\nexport default observer(RegisterForm);","import { observer } from \"mobx-react-lite\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\"\nimport { useStore } from \"../../app/stores/store\";\nimport LoginForm from \"../users/LoginForm\";\nimport RegisterForm from \"../users/RegisterForm\";\n\n\nconst HomePage = () => {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\n                        <Button as={Link} to=\"/activities\" size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>\n\n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n                    </>\n\n                )}\n\n\n            </Container>\n        </Segment>\n    )\n}\n\n\nexport default observer(HomePage);","import { Dimmer, Loader } from 'semantic-ui-react';\ninterface Props{\n    inverted?: boolean;\n    content?: string;\n}\nconst LoadingComponent = ({inverted = true, content = 'Loading...'}: Props) => {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content}/>\n        </Dimmer>\n    )\n}\n\nexport default LoadingComponent;","\nimport { useField } from \"formik\";\nimport React from \"react\";\nimport { Form, Label } from \"semantic-ui-react\";\n\ninterface Props{\n    placeholder: string;\n    name: string;\n    label?: string;\n    rows: number;\n}\nconst MyTextArea = (props: Props) => {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n\nexport default MyTextArea;\n","import { useField } from \"formik\";\nimport { Form, Label, Select } from \"semantic-ui-react\";\n\ninterface Props{\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\nconst MySelectInput = (props: Props) => {\n    const [field, meta, helpers] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n\nexport default MySelectInput;","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from \"formik\";\nimport { Form, Label } from \"semantic-ui-react\";\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n\nconst MyDateInput = (props: Partial<ReactDatePickerProps>) => {\n    const [field, meta, helpers] = useField(props.name!);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker {...field} \n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}/>\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n}\n\nexport default MyDateInput;","import { observer } from \"mobx-react-lite\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from \"formik\";\nimport * as Yup from 'yup';\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\n\nconst ActivityForm = () => {\n\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const { createActivity, updateActivity, loadActivity, loadingInitial } = activityStore\n\n    const { id } = useParams<{ id: string }>();\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required(),\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\n    }, [id, loadActivity])\n\n    const handleFormSubmit = (activity: ActivityFormValues) => {\n        if(!activity.id){\n            const newActivity = {\n                ...activity, \n                id: uuid()\n            }\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading...' />\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal'/>\n            <Formik \n            validationSchema={validationSchema}\n            enableReinitialize \n            initialValues={activity} \n            onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title'/>\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput\n                            placeholderText='Date'\n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                            />\n                        <Header content='Location Details' sub color='teal'/>\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} \n                            floated='right' \n                            positive \n                            type='submit' \n                            content='Submit' />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n\n        </Segment>\n    )\n}\n\nexport default observer(ActivityForm);","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport  { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns'\nimport { useStore } from '../../../app/stores/store';\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nconst ActivityDetailedHeader = ({activity}: Props) => {\n\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\n \n\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n                {activity.isCancelled && \n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \n                        ribbon color='red' content='Cancelled'/>\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button  color={activity.isCancelled ? 'green' : 'red'} floated='left' basic \n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}/>\n                        <Button as={Link} \n                            to={`/manage/${activity.id}`} \n                            color='orange' \n                            floated='right'\n                            disabled={activity.isCancelled}>\n                            Manage Event\n                        </Button>\n                    </>\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\n                )}\n                \n                \n                \n            </Segment>\n        </Segment.Group>\n    )\n}\nexport default observer(ActivityDetailedHeader);","import { observer } from 'mobx-react-lite';\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nconst ActivityDetailedInfo = ({activity}: Props) => {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n}\nexport default observer(ActivityDetailedInfo);","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nconst ActivityDetailedSidebar = ({ activity: { profiles, host } }: Props) => {\n    if (!profiles) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {profiles.length} {profiles.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {profiles.map(attendee => {\n                        return (\n                            <Item style={{ position: 'relative' }} key={attendee.username}>\n                                {attendee.username === host?.username &&\n                                    <Label\n                                        style={{ position: 'absolute' }}\n                                        color='orange'\n                                        ribbon='right'\n                                    >\n                                        Host\n                        </Label>}\n                                <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                                <Item.Content verticalAlign='middle'>\n                                    <Item.Header as='h3'>\n                                        <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                    </Item.Header>\n                                    {attendee.following && \n                                        <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                                    \n                                </Item.Content>\n                            </Item>\n                        )\n                    })}\n                </List>\n            </Segment>\n        </>\n\n    )\n}\nexport default observer(ActivityDetailedSidebar);","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\n\nconst ActivityDetails = () => {\n    const { activityStore } = useStore();\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\n\n    const { id } = useParams<{ id: string }>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity}/>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(ActivityDetails);\n\n","import {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport { useState } from \"react\";\nimport ValidationErrors from \"./ValidationErrors\";\n\nconst TestErrors = () => {\n    const baseUrl = process.env.REACT_APP_API_URL;\n\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => {setErrors(err)});\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors && <ValidationErrors errors={errors} />}\n        </>\n    )\n}\n\nexport default TestErrors;","import { Link } from \"react-router-dom\";\nimport { Header, Segment, Icon, Button } from \"semantic-ui-react\";\n\n\nconst NotFound = () =>{\n    return (\n        <Segment>\n            <Header icon>\n                <Icon name='search'/>\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}\n\nexport default NotFound;","import { Container, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\n\n\nconst ServerError = () => {\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details && \n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal'/>\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>}\n        </Container>\n    )\n}\n\nexport default ServerError;","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Modal } from \"semantic-ui-react\";\nimport { useStore } from \"../../stores/store\";\n\n\nconst ModalContainer = () => {\n    const {modalStore} = useStore();\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    );\n}\n\n\nexport default observer(ModalContainer);","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { UserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future' } },\n    { menuItem: 'Past Events', pane: { key: 'past' } },\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\n];\n\nconst ProfileActivities = () => {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n};\n\nexport default observer(ProfileActivities);","import React from 'react';\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\nimport ProfileCard from \"./ProfileCard\";\nimport {useStore} from \"../../app/stores/store\";\nimport { observer } from 'mobx-react-lite';\n\nconst ProfileFollowings = () => {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\n                    />\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}\n\nexport default observer(ProfileFollowings);","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import  { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\n            <input {...getInputProps()} />  \n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import  { useEffect, useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>}\n\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from \"mobx-react-lite\";\nimport { SyntheticEvent, useState } from \"react\";\nimport { Button, Card, Grid, Header, Image, Tab } from \"semantic-ui-react\";\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\nimport { Photo, Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\ninterface Props {\n    profile: Profile | null\n}\n\nconst ProfilePhotos = ({ profile }: Props) => {\n    const { profileStore: { isCurrentuser, uploadPhoto, \n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\n\n    const [target, setTarget] = useState('');\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n\n    const handlePhotoUpload = (file: Blob) => {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n    const handleSetMainPhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) =>  {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n    const handleDeletePhoto = (photo: Photo, e: SyntheticEvent<HTMLButtonElement>) =>  {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentuser && (\n                        <Button floated='right' basic content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                        <Card.Group itemsPerRow={5}>\n                            {profile?.photos?.map(photo => {\n                                return (\n                                    <Card key={photo.id}>\n                                        <Image src={photo.url} />\n                                        {isCurrentuser && (\n                                            <Button.Group fluid width={2}>\n                                                <Button basic\n                                                color='green'\n                                                content='Main'\n                                                name={'main'+photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === 'main'+photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo,e)} />\n                                                <Button\n                                                    loading={target === photo.id && loading}\n                                                    basic \n                                                    color='red' \n                                                    icon='trash'\n                                                    onClick={e=>handleDeletePhoto(photo,e)}\n                                                    disabled={photo.isMain}\n                                                    name={photo.id}\n                                                    />\n                                            </Button.Group>\n                                        )}\n                                    </Card>)\n                            })}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n          \n        </Tab.Pane>\n    )\n}\n\nexport default observer(ProfilePhotos);","import { observer } from \"mobx-react-lite\";\nimport { Tab } from \"semantic-ui-react\";\nimport { Profile } from \"../../app/models/profile\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileActivities from \"./ProfileActivities\";\nimport ProfileFollowings from \"./ProfileFollowings\";\nimport ProfilePhotos from \"./ProfilePhotos\";\ninterface Props{\n    profile: Profile | null\n}\nconst ProfileContent = ({profile}: Props) => {\n    const {profileStore} = useStore();\n\n    const panes = [\n\n        {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile}/>},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\n\n    ];\n\n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n}\n\nexport default observer(ProfileContent);","import { observer } from \"mobx-react-lite\";\nimport { Button, Divider, Grid, Header, Item, ItemDescription, Reveal, RevealProps, Segment, Statistic } from \"semantic-ui-react\"\nimport { Profile } from \"../../app/models/profile\";\nimport FollowButton from \"./FollowButton\";\n\ninterface Props{\n    profile: Profile | null\n}\nconst ProfileHeader = ({profile}: Props) => {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile?.image ||  '/assets/user.png'}/>\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile?.displayName}/>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group width={2}>\n                        <Statistic label='Followers' value={profile?.followerCount}></Statistic>\n                        <Statistic label='Following' value={profile?.followingCount}></Statistic>\n                    </Statistic.Group>\n                    <Divider/>\n                    <FollowButton profile={profile!}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n}\n\nexport default observer(ProfileHeader);","import { observer } from \"mobx-react-lite\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\nimport { useStore } from \"../../app/stores/store\";\nimport ProfileContent from \"./ProfileContent\";\nimport ProfileHeader from \"./ProfileHeader\";\n\n\nconst ProfilePage = () =>{\n    const {username} = useParams<{username: string}>();\n    const {profileStore} = useStore();\n    const {loadingProfile, loadProfile, profile} = profileStore;\n\n\n    useEffect(() => {\n        loadProfile(username);\n    }, [ loadProfile, username])\n\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...'/>\n\n    return(\n        <Grid>\n            <Grid.Column width={16}>\n                <ProfileHeader profile={profile}/>\n                <ProfileContent profile={profile}/>\n            </Grid.Column>\n        </Grid>\n    )\n}\n\nexport default observer(ProfilePage);","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dahsboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetail';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore} = useStore();\n\n\n  useEffect(() => {\n    if(commonStore.token){\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else{ \n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer/>\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage}/>\n                <PrivateRoute path='/errors' component={TestErrors}/>\n                <Route path='/server-error' component={ServerError}/>\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport 'react-calendar/dist/Calendar.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history'\nimport ScrollToTop from './app/layout/ScrollToTop';\n\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop/>\n      <App />\n    </Router>\n  </StoreContext.Provider>\n    ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}